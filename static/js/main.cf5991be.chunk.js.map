{"version":3,"sources":["Tvm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Variable","compute","props","name","className","htmlFor","this","label","id","type","value","variables","onChange","onClick","React","Component","Tvm","state","pv","fv","rate","nper","pmt","cf","pf","TvmCalculator","calcPV","calcFV","calcInterestRate","calcNPer","Object","assign","setState","evt","parseFloat","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAGMA,E,4MAGFC,QAAU,WAEN,EAAKC,MAAMD,QAAQ,EAAKC,MAAMC,O,4CAGlC,WAEI,OAEI,sBAAKC,UAAU,sBAAf,UAEI,uBAAOC,QAASC,KAAKJ,MAAMC,KACvBC,UAAU,oCADd,SAEKE,KAAKJ,MAAMK,QAGhB,uBAAOC,GAAIF,KAAKJ,MAAMC,KAClBM,KAAK,SACLN,KAAMG,KAAKJ,MAAMC,KACjBO,MAAOJ,KAAKJ,MAAMS,UAAUL,KAAKJ,MAAMC,MACvCS,SAAUN,KAAKJ,MAAMU,SACrBR,UAAU,uEAEd,wBAAQS,QAASP,KAAKL,QAClBG,UAAU,oFADd,4B,GA1BOU,IAAMC,WAoCvBC,E,4MAEFC,MAAQ,CACJN,UAAW,CACPO,GAAI,GACJC,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,IAAK,EACLC,GAAI,EACJC,GAAI,I,EAKZvB,QAAU,SAACE,GAEP,IAAIO,EAAQ,GAEZ,OAAOP,GAEH,IAAK,KACDO,EAAQe,IAAcC,OAAO,EAAKT,MAAMN,WACxC,MAEJ,IAAK,KACDD,EAAQe,IAAcE,OAAO,EAAKV,MAAMN,WACxC,MAEJ,IAAK,OACDD,EAAQe,IAAcG,iBAAiB,EAAKX,MAAMN,WAClD,MAEJ,IAAK,OACDD,EAAQe,IAAcI,SAAS,EAAKZ,MAAMN,WAIlD,IAAIA,EAAYmB,OAAOC,OAAO,GAAI,EAAKd,MAAMN,WAE7CA,EAAUR,GAAQO,EAElB,EAAKsB,SAAS,CAACrB,UAAWA,K,EAG9BC,SAAW,SAACqB,GAER,IAAItB,EAAYmB,OAAOC,OAAO,GAAI,EAAKd,MAAMN,WAEzCD,EAAQwB,WAAWD,EAAIE,OAAOzB,OAGlCC,EAAUsB,EAAIE,OAAOhC,MAAQO,EAE7B,EAAKsB,SAAS,CAACrB,UAAWA,K,4CAG9B,WAEI,OAEI,sBAAKP,UAAU,qFAAf,UAEI,qBAAIA,UAAU,sCAAd,iCACwB,uBAAOA,UAAU,yCAAjB,2BAGxB,cAAC,EAAD,CAAUD,KAAK,KACXI,MAAM,gBACNK,SAAUN,KAAKM,SACfX,QAASK,KAAKL,QACdU,UAAWL,KAAKW,MAAMN,YAE1B,cAAC,EAAD,CAAUR,KAAK,KACXI,MAAM,eACNK,SAAUN,KAAKM,SACfX,QAASK,KAAKL,QACdU,UAAWL,KAAKW,MAAMN,YAE1B,cAAC,EAAD,CAAUR,KAAK,OACXI,MAAM,cACNK,SAAUN,KAAKM,SACfX,QAASK,KAAKL,QACdU,UAAWL,KAAKW,MAAMN,YAE1B,cAAC,EAAD,CAAUR,KAAK,OACXI,MAAM,eACNK,SAAUN,KAAKM,SACfX,QAASK,KAAKL,QACdU,UAAWL,KAAKW,MAAMN,mB,GAzFxBG,IAAMC,WAiGTC,IC5HAoB,MAVf,WACE,OACE,qBAAKhC,UAAU,8BAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,cAAC,EAAD,SCMOiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1Bb,M","file":"static/js/main.cf5991be.chunk.js","sourcesContent":["import React from 'react';\nimport TvmCalculator from 'tvm-calculator';\n\nclass Variable extends React.Component {\n\n\n    compute = () => {\n     \n        this.props.compute(this.props.name);\n    }\n\n    render() {\n\n        return (\n\n            <div className=\"flex my-4 px-2 py-4\">\n\n                <label htmlFor={this.props.name} \n                    className='text-right flex-initial w-1/4 p-2'>\n                    {this.props.label}\n                </label>\n                \n                <input id={this.props.name} \n                    type='number'\n                    name={this.props.name} \n                    value={this.props.variables[this.props.name]}\n                    onChange={this.props.onChange} \n                    className='focus:bg-yellow-100 rounded-md flex-auto border-2 border-solid p-2' />\n                \n                <button onClick={this.compute} \n                    className='bg-purple-200 shadow rounded-md w-28 mx-2 border-indigo-100 border-solid border-2'>\n                    Compute\n                </button>\n\n            </div>\n        );\n    }\n}\n\nclass Tvm extends React.Component {\n\n    state = {\n        variables: {\n            pv: '',\n            fv: '',\n            rate: '',\n            nper: '',\n            pmt: 0,\n            cf: 1,\n            pf: 1\n        }\n    }\n\n\n    compute = (name) => {\n\n        let value = '';\n\n        switch(name) {\n\n            case 'pv': \n                value = TvmCalculator.calcPV(this.state.variables);\n                break;\n\n            case 'fv': \n                value = TvmCalculator.calcFV(this.state.variables);\n                break;\n\n            case 'rate': \n                value = TvmCalculator.calcInterestRate(this.state.variables);\n                break;\n            \n            case 'nper':\n                value = TvmCalculator.calcNPer(this.state.variables);\n                break;\n        }\n\n        let variables = Object.assign({}, this.state.variables);\n\n        variables[name] = value;\n\n        this.setState({variables: variables});\n    }\n\n    onChange = (evt) => {\n\n        let variables = Object.assign({}, this.state.variables);\n\n        let value = parseFloat(evt.target.value);\n\n\n        variables[evt.target.name] = value;\n\n        this.setState({variables: variables});\n    }\n\n    render() {\n\n        return (\n\n            <div className=\"bg-gradient-to-r from-white to-gray-100 border-solid border-4 px-6 py-4 rounded-lg\">\n\n                <h1 className=\"font-bold text-4xl my-4 text-center\">\n                    Time Value Of Money <small className=\"text-lg font-light text-gray-500 block\">Calculator</small>\n                </h1>\n\n                <Variable name='pv'\n                    label='Present Value'\n                    onChange={this.onChange}\n                    compute={this.compute}\n                    variables={this.state.variables} />\n                \n                <Variable name='fv'\n                    label='Future Value'\n                    onChange={this.onChange}\n                    compute={this.compute}\n                    variables={this.state.variables} />\n                \n                <Variable name='rate'\n                    label='Annual Rate'\n                    onChange={this.onChange}\n                    compute={this.compute}\n                    variables={this.state.variables} />\n\n                <Variable name='nper'\n                    label='No. of Years'\n                    onChange={this.onChange}\n                    compute={this.compute}\n                    variables={this.state.variables} />\n\n            </div>\n        );\n    }\n}\n\n    \nexport default Tvm;","import Tvm from './Tvm';\n\nfunction App() {\n  return (\n    <div className=\"container mx-auto font-mono\">\n      <div className=\"mx-auto max-w-2xl my-8\">\n        <Tvm />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}